void strcpy(char dst[], char const src[])
{
    int index = 0;
    while((dst[index] = src[index]))
    {
        index++;
    }              
}

How pointer implementation works:
To the function a C-string is passed as a pointer src pointing to a const char.
The src pointer assigns the character at the current incrementation to the same
incrementation of dst (i.e. first element where src is pointing at is assigned to the first element
where dst is pointing at, the next incrementation copies the second element, etc).
The loop terminates after the end of the C-string is reached, i.e. when '\0'

How index-using implementation works:
An empty char array dst must be provided where the src char array can copy its elements to.
In reality the arrays are pointers to a memory location where the characters are stored(src) or gets copied to(dst).
The incrementation variable is instantiated as 0 to start at the first element. In the while-loop the first element
of dst is assigned the value of the first element of src. Then the loop increments the index variable to copy the other
elements to dst. Just like the pointer version, the while-loop terminates when the '/0' character is reached.

Why pointers are preferred:
It takes less code to do the pointer version, so it is also easier to read the code.
It is faster and more efficient in memory, because only a memory address has to be provided instead of a whole array.
This also gives pointers the ability to allocate memory dynamically, because it uses the elements at the address one by one.
If an array is used, than all its elements have to be provided, then one by one the elements are copied(src) to the other array(dst)
which is empty at default before copying. So the array is copied and memory must be allocated for it. 
The pointer version points at the element(src) in memory and assigns it to the memory position of the other pointer(dst).
So using an array and iterating over its elements is slower and less efficient than using a pointer that take the element directly from memory.

