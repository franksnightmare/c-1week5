void strcpy(char dst[], char const src[])
{
    int index = 0;
    while((dst[index] = src[index]))
    {
        index++;
    }              
}

How pointer implementation works:
To the function a C-string is passed as a pointer src pointing to a const char.
The src pointer assigns the character at the current incrementation to the same
incrementation of dst (i.e. first element where src is pointing at is assigned to the first element
where dst is pointing at, the next incrementation copies the second element, etc).
The loop terminates after the end of the C-string is reached, i.e. when '\0'

How index-using implementation works:
An empty char array dst must be provided where the src char array can copy its elements to.
In reality the arrays are pointers to a memory location where the characters are stored(src) or gets copied to(dst).
The incrementation variable is instantiated as 0 to start at the first element. In the while-loop the first element
of dst is assigned the value of the first element of src. Then the loop increments the index variable to copy the other
elements to dst. Just like the pointer version, the while-loop terminates when the '/0' character is reached.

--------------------------------------------------------------------------------------
Why pointer-implementation is preferred:
The pointer-implementation is preferred, because it is more efficient.
If indices are used, then the program first goes to the index and then
looks at the memory. A pointer goes directly to the memory and then performs
its duty.
