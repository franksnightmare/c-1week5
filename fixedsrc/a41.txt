The variants of new/delete are:

1 new/delete:

	to allocate primitive types or objects; eg:

	int *v1 = new int;		// an int pointer variable points to memory allocated by operator new
	string *s1 = new string;	// a class-type object is allocated

	to release the memory of a single element allocated using new; eg:

	delete v1;
	delete s1;


2 new[]/delete[]:

	to allocate dynamic arrays, whose lifetime may exceed the lifetime of the function in which they were created; eg:

	int *intarr = new int[20];		// allocates 20 ints
	string *stringarr = new string[10];	// allocates 10 class-type objects 'string'

	to call the destructor for each element in the array and return the memory pointed at by the pointer to the common pool; eg:

	delete[] intarr;
	delete[] stringarr;


3 operator new(sizeInBytes)/operator delete:

	to allocate raw memory, a block of memory for unspecified purpose; eg:
	
	string *stPtr = static_cast<string *>(operator new(10 * sizeof(std::string))); // the raw memory returned by new is a void *, here assigned to a string * variable


	to return the raw memory allocated by operator new; eg:

	operator delete(chPtr);

4 placement new:
	to initialize an object or value into an existing block of memory; eg:
	
	string *sp = new(chPtr) std::string("example");	//installs a string into the block of memory created in the example from section 3.1
	
	the destructor has to be called explicitly to destroy the object, followed by operator delete to deallocate the memory as in section 3.2, eg:
	
	sp->~string();
	
